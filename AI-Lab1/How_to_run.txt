# How to Run the Genetic Algorithm Experiments

## Prerequisites

- Python 3.6 or higher
- Required packages: numpy, pandas, matplotlib, seaborn

## Installation

1. Install the required packages:

Run following command in your terminal 

"pip install numpy pandas matplotlib seaborn"


2. Download the code file:

- Place 'code.py' in your working directory

## Running the Experiments
To run all experiments (crossover operators, selection methods, LCS fitness, ARC Challenge, and Bin Packing), run following command in your terminal:


"python code.py"


This will execute all experiments sequentially and save visualization files to the current directory.

## Running Specific Experiments
If you want to run specific parts of the code, you can modify the main() function in code.py to include only the sections you're interested in.

For example, to run only the crossover operators comparison:
1. Open code.py in a text editor
2. In the main() function, comment out all sections except for the crossover operators section
3. Run the modified code

## Generated Files
The program will generate multiple PNG visualization files:
- Fitness evolution plots (e.g., fitness_evolution_single_point.png)
- Boxplot visualizations (e.g., fitness_boxplots_single_point.png)
- Exploration vs. exploitation plots (e.g., exploration_exploitation_single_point.png)
- Comparison plots (e.g., crossover_comparison.png, selection_comparison.png)
- ARC problem visualizations (e.g., arc_problem_Checkerboard.png)
- Bin packing visualizations (e.g., bin_packing_Genetic_Algorithm.png)

## Expected Runtime
- Full experiment suite: ~5-10 minutes
- Individual experiments (e.g., single crossover operator): 1-2 minutes

## Understanding the Output
The program prints detailed information to the console, including:
- Generation-by-generation updates on the best solutions
- Detailed metrics at regular intervals
- Final solutions and summaries of performance

## Code Structure
- Main algorithm implementation: GeneticAlgorithm class
- Problem-specific implementations: ARCProblem and BinPackingProblem classes
- Visualization functions: plot_* functions
- Experiment orchestration: main() function

## Troubleshooting
- If you encounter memory errors, try reducing GA_POPSIZE in the code
- For visualization issues, ensure matplotlib is properly configured for your environment
- If you need faster execution, reduce GA_MAXITER or max_generations parameters
